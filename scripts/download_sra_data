#!/usr/bin/env Rscript
suppressMessages(library(optparse))
suppressMessages(library(SRAdb))
suppressMessages(library(DBI))
suppressMessages(library(GEOmetadb))

option_list <- list(make_option(c("-f", "--file"), type="character", default=NULL,
                                help="Path to file containing SRP ids one per line",
                                metavar="character"),
                    make_option(c("-o", "--out"), type="character",
                                default=file.path('.', 'SRA_datasets'),
                                help="Path to download SRA datasets to [default= %default]",
                                metavar="character"),
                    make_option(c("-a", "--ascp"), type="character",
                                default=file.path('~/.aspera/connect/etc/asperaweb_id_dsa.openssh'),
                                help="Path to ASPERA key file [default= %default]",
                                metavar="character"),
                    make_option(c("-s", "--sradb"), type="character",
                                default=file.path('.', 'SRAmetadb.sqlite'),
                                help="Path to SRAdb.sqlite file [default= %default]",
                                metavar="character"),
                    make_option(c("-g", "--geodb"), type="character",
                                default=file.path('.', 'GEOmetadb.sqlite'),
                                help="Path to GEOmetadb.sqlite sqlite file [default= %default]",
                                metavar="character")
                    )
parser <- OptionParser(option_list=option_list)#,  positional_arguments=TRUE)
arguments <- parse_args (parser, positional_arguments=TRUE)
opt <- arguments$options
args <- arguments$args
if (is.null(opt$file) && (!(length(args) == 1L && nzchar(args))) ){
    cat('Usage: download_sra_data <SRP_ID1> <SRP_ID2>\nDetailed help: download_sra_data -h\n')
    quit(status=1)
}

ascpKeyPath <- opt$ascp
download.root.location <- opt$out
readkey <- function()
{
    cat("\nWithout Aspera, downloading will be extremely slow. Continue? y|[n]: ")
    char <- scan("stdin", character(), n=1, quiet=TRUE)
    if (char!='y') stop()
}

shouldUseASCP <- TRUE
if (!file.exists(ascpKeyPath)){
    cat(paste("Warning: ascp key path", ascpKeyPath, "not valid. Please download Aspera (http://www.asperasoft.com/) for faster downloads.", sep= ''))
    readkey()
    cat("Using slow download mode ...")
    shouldUseASCP <- FALSE
}
SRAsqlfile <- file.path(opt$sradb)
GEOsqlfile <- file.path(opt$geodb)
ascpCMD <- paste0('ascp -k 1 -QT -l 2000m -i ', ascpKeyPath)
if(!file.exists(SRAsqlfile)) SRAsqlfile <<- getSRAdbFile()
if(!file.exists(GEOsqlfile)) GEOsqlfile <<- getSQLiteFile()
sra_con <- dbConnect(SQLite(), SRAsqlfile)
geo_con <- dbConnect(SQLite(), GEOsqlfile)

dir.create(file.path(download.root.location), showWarnings = F)

if (!is.null(opt$file)){
    if (file.exists(opt$file)){
        input_list <- scan(opt$file, what="", sep='\n')
    }
    else{
        stop(paste0(opt$file, ' not found'))
    }
} else {
    input_list <- args
}

getInfo <- function(accession, sra_con, sraType='sra') {
  return (getSRAinfo(in_acc=accession, sra_con = sra_con, sraType=sraType)[,1])
}

getSampleAlias <- function(srs, sra_con) {
  return (unlist(dbGetQuery(sra_con, paste("SELECT sample_alias, scientific_name",
                                           " FROM sample where sample_accession='",
                                           srs, "' ", sep="") ) ) )
}

getExperimentAlias <- function(srx, sra_con) {
    return (unlist(dbGetQuery(sra_con, paste("SELECT experiment_alias",
                                             " FROM experiment WHERE experiment_accession='",
                                             srx, "'", sep="") ) ) )
}

get_SRP_from_GSE <- function(gse){
    if (grepl('SRP', gse)){
        return (gse)
    }
    results <- as.list(dbGetQuery(geo_con, paste0("SELECT * FROM gse WHERE gse = '", gse, "'")))
    supplementary_file <- strsplit(results$supplementary_file, ';')[[1]]
    srp_match <- grep('SRP', supplementary_file, value=TRUE)
    return (sapply(strsplit(srp_match, '/'), tail, 1))

}

download_metadata <- function(srp, destination_dir){
    url <- paste0('https://trace.ncbi.nlm.nih.gov/Traces/study/?acc=', srp, '&get=csv_all')
    cmd <- paste0('wget -O ', file.path(destination_dir,
                                        'SraRunTable.txt'),
                  ' -c ', url)
    return (url)
}

getMetadata <- function(accession, sra_con, cols){
    cols <- paste(cols,  collapse=", ")
    return (dbGetQuery(sra_con, paste("SELECT ", cols,
                                      " FROM sra WHERE run_accession='",
                                      run_accession, "'", sep="")))
}

download <- function(record){
  srp_id <- record[1]
  srx_id <- record[2]
  dir.create(file.path(download.root.location), showWarnings = F)
  dir.create(file.path(download.root.location, srp_id), showWarnings = F)
  dir.create(file.path(download.root.location, srp_id, srx_id), showWarnings = F)
  dir_name <- file.path(download.root.location, srp_id, srx_id)
  if (shouldUseASCP){  getSRAfile(srx_id, sra_con,
                                  fileType = 'sra',
                                  srcType = 'fasp',
                                  destDir = dir_name,
                                  ascpCMD = ascpCMD )
                    } else {  getSRAfile(srx_id, sra_con,
                                         fileType = 'sra',
                                         srcType = 'ftp',
                                         method = 'wget',
                                         destDir = dir_name
                                         )
                    }
}

srp_list <- c()
for (element in input_list) {
    if (grepl('GSE*', element)){
        srp_list <- c(srp_list, get_SRP_from_GSE(element))
    }
    else{
        srp_list <- c(srp_list, element)
    }

}

for (srp in srp_list){
    cat( paste0('Downloading ', srp))
    conversion <- sraConvert(srp, sra_con = sra_con)
    conversion$ftp <- apply(matrix(conversion$run, ncol=1), MAR=1, FUN = getInfo, sra_con = sra_con)
    ## Correct ftp link
    conversion$ftp <- gsub("ByExp", "ByRun", conversion$ftp)

    conversion <- cbind(conversion, t(apply(matrix(conversion$sample, ncol=1),
                                            MAR=1, FUN=getSampleAlias, sra_con=sra_con)))
    cols <- c("library_name", "library_strategy", "library_source",
              "library_selection", "library_layout", "experiment_attribute",
              "experiment_alias", "experiment_title", "sample_name",
              "read_spec", "spots", "sample_attribute", "study_title",
              "study_accession", "common_name", "taxon_id")
    metadata <- as.data.frame(matrix(NA, nrow(conversion), length(cols)+2))
    for (i in 1:nrow(metadata)) {
        run_accession <- conversion$run[i]
        metadata[i, 1:length(cols) ] <- getMetadata(run_accession, sra_con, cols)
        metadata[i, length(cols)+1] <- conversion$sample_alias[i]
        metadata[i, length(cols)+2] <- conversion$scientific_name[i]
    }
    names(metadata) <- c(cols, 'sample_alias', 'scientific_name')
    metadata <- metadata[!duplicated(metadata), ]
    dir.create(file.path(download.root.location, srp), showWarnings = F)
    write.table(metadata, file.path(download.root.location,
                                    srp, 'metadata.tsv'),
                row.names=FALSE, sep='\t')
    sra_df <- as.data.frame(conversion)
    sra_df <- sra_df[!duplicated(sra_df),]
    srp_srx = sra_df[, c(1,4)]
    sra_srx <- srp_srx[!duplicated(srp_srx),]
    apply(sra_srx, 1, download)
}
dbDisconnect(sra_con)
dbDisconnect(geo_con)
