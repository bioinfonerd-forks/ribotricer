"""Utilities for translating ORF detection"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import warnings

from collections import Counter
from collections import defaultdict


def count_orf_reads(ribocop_index,
                    detected_orfs,
                    features,
                    prefix,
                    report_all=False):
    """
    Parameters
    ----------
    ribocop_index: str
                   Path to the index file generated by RiboCop prepare_orfs
    detected_orfs: str
                   Path to the detected orfs file generated by RiboCop detect_orfs
    features: set
              set of ORF types, such as {annotated}
    prefix: str
            prefix for output file
    report_all: bool
                if True, all coverages will be exported
    """
    orf_index = {}
    read_counts = defaultdict(dict)
    with open(ribocop_index, 'r') as fin:
        header = True
        for line in fin:
            if header:
                header = False
                continue
            orf = ORF.from_string(line)
            if orf.category in features:
                orf_index[orf.oid] = orf
    with open(detected_orfs, 'r') as fin:
        header = True
        for line in fin:
            if header:
                header = False
                continue
            fields = line.strip().split('\t')
            oid, otype, status = fields[:3]
            gene_id, gene_name, gene_type = fields[9:12]
            chrom, strand, start_codon, profile = fields[12:]
            if otype not in features:
                continue
            if status == 'nontranslating' and not report_all:
                continue
            intervals = orf_index[oid].intervals
            coor = [x for iv in intervals for x in range(iv.start, iv.end + 1)]
            if strand == '-':
                coor = coor[::-1]
            profile = map(int, profile.strip()[1:-1].split(', '))
            for pos, cov in zip(coor, profile):
                if pos not in read_counts[gene_id, gene_name]:
                    read_counts[gene_id, gene_name][pos] += cov

    with open('{}_cnt.txt'.format(prefix), 'w') as fout:
        fout.write('gene_id\tcount\n')
        for gene_id, gene_name in sorted(read_counts):
            total = sum(read_counts[gene_id, gene_name].values())
            fout.write('{}\t{}\n'.format(gene_id, total))
